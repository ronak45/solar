// This file is auto-generated by @hey-api/openapi-ts

import { type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { PantryServiceScanPantryItemsData, PantryServiceScanPantryItemsResponse, PantryServiceScanPantryItemsError, PantryServiceAddPantryItemData, PantryServiceAddPantryItemResponse, PantryServiceAddPantryItemError, PantryServiceGetUserPantryData, PantryServiceGetUserPantryResponse, PantryServiceGetUserPantryError, PantryServiceUpdatePantryItemQuantityData, PantryServiceUpdatePantryItemQuantityResponse, PantryServiceUpdatePantryItemQuantityError, PantryServiceRemovePantryItemData, PantryServiceRemovePantryItemResponse, PantryServiceRemovePantryItemError, PantryServiceSearchPantryItemsData, PantryServiceSearchPantryItemsResponse, PantryServiceSearchPantryItemsError, RecipeServiceGetRecipeRecommendationsData, RecipeServiceGetRecipeRecommendationsResponse, RecipeServiceGetRecipeRecommendationsError, RecipeServiceGetRecipeByIdData, RecipeServiceGetRecipeByIdResponse, RecipeServiceGetRecipeByIdError, RecipeServiceCreateBaseRecipeData, RecipeServiceCreateBaseRecipeResponse, RecipeServiceCreateBaseRecipeError, RecipeServiceGenerateRecipeFromIngredientsData, RecipeServiceGenerateRecipeFromIngredientsResponse, RecipeServiceGenerateRecipeFromIngredientsError, CookingServiceStartCookingSessionData, CookingServiceStartCookingSessionResponse, CookingServiceStartCookingSessionError, CookingServiceMakeCookingDecisionData, CookingServiceMakeCookingDecisionResponse, CookingServiceMakeCookingDecisionError, CookingServiceProcessVoiceQuestionData, CookingServiceProcessVoiceQuestionResponse, CookingServiceProcessVoiceQuestionError, CookingServiceAddCookingPhotoData, CookingServiceAddCookingPhotoResponse, CookingServiceAddCookingPhotoError, CookingServiceUpdateCurrentStepData, CookingServiceUpdateCurrentStepResponse, CookingServiceUpdateCurrentStepError, CookingServiceCompleteCookingSessionData, CookingServiceCompleteCookingSessionResponse, CookingServiceCompleteCookingSessionError, CookingServiceGetCookingSessionData, CookingServiceGetCookingSessionResponse, CookingServiceGetCookingSessionError, CookingServiceGetUserCookingSessionsData, CookingServiceGetUserCookingSessionsResponse, CookingServiceGetUserCookingSessionsError, NutritionServiceAddNutritionDataData, NutritionServiceAddNutritionDataResponse, NutritionServiceAddNutritionDataError, NutritionServiceGetNutritionDataData, NutritionServiceGetNutritionDataResponse, NutritionServiceGetNutritionDataError, NutritionServiceSearchNutritionDataData, NutritionServiceSearchNutritionDataResponse, NutritionServiceSearchNutritionDataError, NutritionServiceCalculateRecipeNutritionData, NutritionServiceCalculateRecipeNutritionResponse, NutritionServiceCalculateRecipeNutritionError, NutritionServiceEstimateNutritionFromLlmData, NutritionServiceEstimateNutritionFromLlmResponse, NutritionServiceEstimateNutritionFromLlmError, NutritionServiceBulkImportNutritionDataData, NutritionServiceBulkImportNutritionDataResponse, NutritionServiceBulkImportNutritionDataError, NutritionServiceGetNutritionByCategoryData, NutritionServiceGetNutritionByCategoryResponse, NutritionServiceGetNutritionByCategoryError, NutritionServiceUpdateNutritionCostData, NutritionServiceUpdateNutritionCostResponse, NutritionServiceUpdateNutritionCostError, NutritionServiceAnalyzeDietaryCompatibilityData, NutritionServiceAnalyzeDietaryCompatibilityResponse, NutritionServiceAnalyzeDietaryCompatibilityError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Pantry Service Scan Pantry Items
 * Scan an image of pantry items and return identified items with suggested details.
 */
export const pantryServiceScanPantryItems = <ThrowOnError extends boolean = false>(options: Options<PantryServiceScanPantryItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PantryServiceScanPantryItemsResponse, PantryServiceScanPantryItemsError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/pantry_service/scan_pantry_items',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Pantry Service Add Pantry Item
 * Add a new item to the user&#39;s pantry inventory.
 */
export const pantryServiceAddPantryItem = <ThrowOnError extends boolean = false>(options: Options<PantryServiceAddPantryItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PantryServiceAddPantryItemResponse, PantryServiceAddPantryItemError, ThrowOnError>({
        url: '/api/pantry_service/add_pantry_item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Pantry Service Get User Pantry
 * Get all pantry items for a user.
 */
export const pantryServiceGetUserPantry = <ThrowOnError extends boolean = false>(options: Options<PantryServiceGetUserPantryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PantryServiceGetUserPantryResponse, PantryServiceGetUserPantryError, ThrowOnError>({
        url: '/api/pantry_service/get_user_pantry',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Pantry Service Update Pantry Item Quantity
 * Update the quantity of a pantry item.
 */
export const pantryServiceUpdatePantryItemQuantity = <ThrowOnError extends boolean = false>(options: Options<PantryServiceUpdatePantryItemQuantityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PantryServiceUpdatePantryItemQuantityResponse, PantryServiceUpdatePantryItemQuantityError, ThrowOnError>({
        url: '/api/pantry_service/update_pantry_item_quantity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Pantry Service Remove Pantry Item
 * Remove an item from the pantry.
 */
export const pantryServiceRemovePantryItem = <ThrowOnError extends boolean = false>(options: Options<PantryServiceRemovePantryItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PantryServiceRemovePantryItemResponse, PantryServiceRemovePantryItemError, ThrowOnError>({
        url: '/api/pantry_service/remove_pantry_item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Pantry Service Search Pantry Items
 * Search pantry items by name, brand, or category.
 */
export const pantryServiceSearchPantryItems = <ThrowOnError extends boolean = false>(options: Options<PantryServiceSearchPantryItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PantryServiceSearchPantryItemsResponse, PantryServiceSearchPantryItemsError, ThrowOnError>({
        url: '/api/pantry_service/search_pantry_items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Recipe Service Get Recipe Recommendations
 * Get recipe recommendations based on user&#39;s pantry and preferences.
 */
export const recipeServiceGetRecipeRecommendations = <ThrowOnError extends boolean = false>(options: Options<RecipeServiceGetRecipeRecommendationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RecipeServiceGetRecipeRecommendationsResponse, RecipeServiceGetRecipeRecommendationsError, ThrowOnError>({
        url: '/api/recipe_service/get_recipe_recommendations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Recipe Service Get Recipe By Id
 * Get a specific recipe by its ID.
 */
export const recipeServiceGetRecipeById = <ThrowOnError extends boolean = false>(options: Options<RecipeServiceGetRecipeByIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RecipeServiceGetRecipeByIdResponse, RecipeServiceGetRecipeByIdError, ThrowOnError>({
        url: '/api/recipe_service/get_recipe_by_id',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Recipe Service Create Base Recipe
 * Create a new base recipe.
 */
export const recipeServiceCreateBaseRecipe = <ThrowOnError extends boolean = false>(options: Options<RecipeServiceCreateBaseRecipeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RecipeServiceCreateBaseRecipeResponse, RecipeServiceCreateBaseRecipeError, ThrowOnError>({
        url: '/api/recipe_service/create_base_recipe',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Recipe Service Generate Recipe From Ingredients
 * Generate a new recipe using AI based on available ingredients.
 */
export const recipeServiceGenerateRecipeFromIngredients = <ThrowOnError extends boolean = false>(options: Options<RecipeServiceGenerateRecipeFromIngredientsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RecipeServiceGenerateRecipeFromIngredientsResponse, RecipeServiceGenerateRecipeFromIngredientsError, ThrowOnError>({
        url: '/api/recipe_service/generate_recipe_from_ingredients',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cooking Service Start Cooking Session
 * Start a new cooking session for a recipe.
 */
export const cookingServiceStartCookingSession = <ThrowOnError extends boolean = false>(options: Options<CookingServiceStartCookingSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CookingServiceStartCookingSessionResponse, CookingServiceStartCookingSessionError, ThrowOnError>({
        url: '/api/cooking_service/start_cooking_session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cooking Service Make Cooking Decision
 * Make a decision at a branching point and update the recipe accordingly.
 */
export const cookingServiceMakeCookingDecision = <ThrowOnError extends boolean = false>(options: Options<CookingServiceMakeCookingDecisionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CookingServiceMakeCookingDecisionResponse, CookingServiceMakeCookingDecisionError, ThrowOnError>({
        url: '/api/cooking_service/make_cooking_decision',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cooking Service Process Voice Question
 * Process a voice question during cooking and provide guidance.
 */
export const cookingServiceProcessVoiceQuestion = <ThrowOnError extends boolean = false>(options: Options<CookingServiceProcessVoiceQuestionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CookingServiceProcessVoiceQuestionResponse, CookingServiceProcessVoiceQuestionError, ThrowOnError>({
        url: '/api/cooking_service/process_voice_question',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cooking Service Add Cooking Photo
 * Add a photo taken during cooking.
 */
export const cookingServiceAddCookingPhoto = <ThrowOnError extends boolean = false>(options: Options<CookingServiceAddCookingPhotoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CookingServiceAddCookingPhotoResponse, CookingServiceAddCookingPhotoError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/cooking_service/add_cooking_photo',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Cooking Service Update Current Step
 * Update the current step in the cooking process.
 */
export const cookingServiceUpdateCurrentStep = <ThrowOnError extends boolean = false>(options: Options<CookingServiceUpdateCurrentStepData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CookingServiceUpdateCurrentStepResponse, CookingServiceUpdateCurrentStepError, ThrowOnError>({
        url: '/api/cooking_service/update_current_step',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cooking Service Complete Cooking Session
 * Complete a cooking session and generate the story summary.
 */
export const cookingServiceCompleteCookingSession = <ThrowOnError extends boolean = false>(options: Options<CookingServiceCompleteCookingSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CookingServiceCompleteCookingSessionResponse, CookingServiceCompleteCookingSessionError, ThrowOnError>({
        url: '/api/cooking_service/complete_cooking_session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cooking Service Get Cooking Session
 * Get a cooking session by ID.
 */
export const cookingServiceGetCookingSession = <ThrowOnError extends boolean = false>(options: Options<CookingServiceGetCookingSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CookingServiceGetCookingSessionResponse, CookingServiceGetCookingSessionError, ThrowOnError>({
        url: '/api/cooking_service/get_cooking_session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cooking Service Get User Cooking Sessions
 * Get all cooking sessions for a user.
 */
export const cookingServiceGetUserCookingSessions = <ThrowOnError extends boolean = false>(options: Options<CookingServiceGetUserCookingSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CookingServiceGetUserCookingSessionsResponse, CookingServiceGetUserCookingSessionsError, ThrowOnError>({
        url: '/api/cooking_service/get_user_cooking_sessions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Nutrition Service Add Nutrition Data
 * Add nutrition data for an ingredient.
 */
export const nutritionServiceAddNutritionData = <ThrowOnError extends boolean = false>(options: Options<NutritionServiceAddNutritionDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NutritionServiceAddNutritionDataResponse, NutritionServiceAddNutritionDataError, ThrowOnError>({
        url: '/api/nutrition_service/add_nutrition_data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Nutrition Service Get Nutrition Data
 * Get nutrition data for a specific ingredient.
 */
export const nutritionServiceGetNutritionData = <ThrowOnError extends boolean = false>(options: Options<NutritionServiceGetNutritionDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NutritionServiceGetNutritionDataResponse, NutritionServiceGetNutritionDataError, ThrowOnError>({
        url: '/api/nutrition_service/get_nutrition_data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Nutrition Service Search Nutrition Data
 * Search nutrition data by ingredient name or category.
 */
export const nutritionServiceSearchNutritionData = <ThrowOnError extends boolean = false>(options: Options<NutritionServiceSearchNutritionDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NutritionServiceSearchNutritionDataResponse, NutritionServiceSearchNutritionDataError, ThrowOnError>({
        url: '/api/nutrition_service/search_nutrition_data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Nutrition Service Calculate Recipe Nutrition
 * Calculate total nutrition for a recipe given its ingredients.
 */
export const nutritionServiceCalculateRecipeNutrition = <ThrowOnError extends boolean = false>(options: Options<NutritionServiceCalculateRecipeNutritionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NutritionServiceCalculateRecipeNutritionResponse, NutritionServiceCalculateRecipeNutritionError, ThrowOnError>({
        url: '/api/nutrition_service/calculate_recipe_nutrition',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Nutrition Service Estimate Nutrition From Llm
 * Use LLM to estimate nutrition data for ingredients not in the database.
 */
export const nutritionServiceEstimateNutritionFromLlm = <ThrowOnError extends boolean = false>(options: Options<NutritionServiceEstimateNutritionFromLlmData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NutritionServiceEstimateNutritionFromLlmResponse, NutritionServiceEstimateNutritionFromLlmError, ThrowOnError>({
        url: '/api/nutrition_service/estimate_nutrition_from_llm',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Nutrition Service Bulk Import Nutrition Data
 * Bulk import nutrition data from a list.
 */
export const nutritionServiceBulkImportNutritionData = <ThrowOnError extends boolean = false>(options: Options<NutritionServiceBulkImportNutritionDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NutritionServiceBulkImportNutritionDataResponse, NutritionServiceBulkImportNutritionDataError, ThrowOnError>({
        url: '/api/nutrition_service/bulk_import_nutrition_data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Nutrition Service Get Nutrition By Category
 * Get all nutrition data for a specific category.
 */
export const nutritionServiceGetNutritionByCategory = <ThrowOnError extends boolean = false>(options: Options<NutritionServiceGetNutritionByCategoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NutritionServiceGetNutritionByCategoryResponse, NutritionServiceGetNutritionByCategoryError, ThrowOnError>({
        url: '/api/nutrition_service/get_nutrition_by_category',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Nutrition Service Update Nutrition Cost
 * Update the cost per serving for an ingredient.
 */
export const nutritionServiceUpdateNutritionCost = <ThrowOnError extends boolean = false>(options: Options<NutritionServiceUpdateNutritionCostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NutritionServiceUpdateNutritionCostResponse, NutritionServiceUpdateNutritionCostError, ThrowOnError>({
        url: '/api/nutrition_service/update_nutrition_cost',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Nutrition Service Analyze Dietary Compatibility
 * Analyze if a recipe is compatible with dietary restrictions.
 */
export const nutritionServiceAnalyzeDietaryCompatibility = <ThrowOnError extends boolean = false>(options: Options<NutritionServiceAnalyzeDietaryCompatibilityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NutritionServiceAnalyzeDietaryCompatibilityResponse, NutritionServiceAnalyzeDietaryCompatibilityError, ThrowOnError>({
        url: '/api/nutrition_service/analyze_dietary_compatibility',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};