# Auto-generated by Lumenary
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union, Literal, Annotated, Tuple, Set, Any

from datetime import datetime, date, time, timedelta
from uuid import UUID
import uuid

class TokenExchangeRequest(BaseModel):
    client_id: str
    grant_type: str
    code: Optional[str] = None
    code_verifier: Optional[str] = None

class TokenResponse(BaseModel):
    access_token: str
    token_type: str = "bearer"
    expires_in: int = 3600

class TokenValidationRequest(BaseModel):
    token: str
    
class LogoutResponse(BaseModel):
    success: bool = True

# Import user-defined models that we need for input/response models
from core.pantry_item import PantryItem
from core.base_recipe import BaseRecipe
from core.cooking_session import CookingSession
from core.nutrition_data import NutritionData

ScanPantryItemsOutputSchema = List[Dict]
class BodyPantryServiceAddPantryItem(BaseModel):
  user_id: str
  name: str
  category: str
  quantity: float
  unit: str
  brand: Optional[str] = None
  barcode: Optional[str] = None
  image_path: Optional[str] = None
  tags: Optional[List[str]] = None

AddPantryItemOutputSchema = PantryItem
class BodyPantryServiceGetUserPantry(BaseModel):
  user_id: str

GetUserPantryOutputSchema = List[PantryItem]
class BodyPantryServiceUpdatePantryItemQuantity(BaseModel):
  item_id: UUID
  new_quantity: float

UpdatePantryItemQuantityOutputSchema = PantryItem
class BodyPantryServiceRemovePantryItem(BaseModel):
  item_id: UUID

RemovePantryItemOutputSchema = bool
class BodyPantryServiceSearchPantryItems(BaseModel):
  user_id: str
  query: str

SearchPantryItemsOutputSchema = List[PantryItem]
class BodyRecipeServiceGetRecipeRecommendations(BaseModel):
  user_id: str
  preferences: Optional[str] = None
  dietary_restrictions: Optional[List[str]] = None

GetRecipeRecommendationsOutputSchema = List[Dict]
class BodyRecipeServiceGetRecipeById(BaseModel):
  recipe_id: UUID

GetRecipeByIdOutputSchema = Optional[BaseRecipe]
class BodyRecipeServiceCreateBaseRecipe(BaseModel):
  name: str
  description: str
  cuisine_type: str
  difficulty_level: str
  prep_time_minutes: int
  cook_time_minutes: int
  servings: int
  base_ingredients: List[Dict]
  base_steps: List[Dict]
  branch_points: List[Dict]
  dietary_tags: List[str]

CreateBaseRecipeOutputSchema = BaseRecipe
class BodyRecipeServiceGenerateRecipeFromIngredients(BaseModel):
  ingredient_list: List[str]
  cuisine_preference: Optional[str] = None
  dietary_restrictions: Optional[List[str]] = None

GenerateRecipeFromIngredientsOutputSchema = Dict
class BodyCookingServiceStartCookingSession(BaseModel):
  user_id: str
  base_recipe_id: UUID

StartCookingSessionOutputSchema = CookingSession
class BodyCookingServiceMakeCookingDecision(BaseModel):
  session_id: UUID
  branch_point: int
  choice: str

MakeCookingDecisionOutputSchema = Dict
class BodyCookingServiceProcessVoiceQuestion(BaseModel):
  session_id: UUID
  question: str

ProcessVoiceQuestionOutputSchema = Dict
AddCookingPhotoOutputSchema = str
class BodyCookingServiceUpdateCurrentStep(BaseModel):
  session_id: UUID
  step_number: int

UpdateCurrentStepOutputSchema = CookingSession
class BodyCookingServiceCompleteCookingSession(BaseModel):
  session_id: UUID
  rating: Optional[int] = None
  notes: Optional[str] = None
  would_make_again: Optional[bool] = None

CompleteCookingSessionOutputSchema = Dict
class BodyCookingServiceGetCookingSession(BaseModel):
  session_id: UUID

GetCookingSessionOutputSchema = Optional[CookingSession]
class BodyCookingServiceGetUserCookingSessions(BaseModel):
  user_id: str

GetUserCookingSessionsOutputSchema = List[CookingSession]
class BodyNutritionServiceAddNutritionData(BaseModel):
  ingredient_name: str
  serving_size: str
  calories: float
  protein_g: float
  carbs_g: float
  fat_g: float
  fiber_g: float
  sugar_g: float
  sodium_mg: float
  category: str
  vitamin_c_mg: Optional[float] = None
  vitamin_a_iu: Optional[float] = None
  calcium_mg: Optional[float] = None
  iron_mg: Optional[float] = None
  potassium_mg: Optional[float] = None
  cost_per_serving: Optional[float] = None
  allergens: Optional[str] = None
  data_source: str

AddNutritionDataOutputSchema = NutritionData
class BodyNutritionServiceGetNutritionData(BaseModel):
  ingredient_name: str

GetNutritionDataOutputSchema = Optional[NutritionData]
class BodyNutritionServiceSearchNutritionData(BaseModel):
  query: str

SearchNutritionDataOutputSchema = List[NutritionData]
class BodyNutritionServiceCalculateRecipeNutrition(BaseModel):
  ingredients: List[Dict]

CalculateRecipeNutritionOutputSchema = Dict
class BodyNutritionServiceEstimateNutritionFromLlm(BaseModel):
  ingredient_name: str
  serving_size: str

EstimateNutritionFromLlmOutputSchema = Dict
class BodyNutritionServiceBulkImportNutritionData(BaseModel):
  nutrition_list: List[Dict]

BulkImportNutritionDataOutputSchema = List[NutritionData]
class BodyNutritionServiceGetNutritionByCategory(BaseModel):
  category: str

GetNutritionByCategoryOutputSchema = List[NutritionData]
class BodyNutritionServiceUpdateNutritionCost(BaseModel):
  ingredient_name: str
  cost_per_serving: float

UpdateNutritionCostOutputSchema = Optional[NutritionData]
class BodyNutritionServiceAnalyzeDietaryCompatibility(BaseModel):
  ingredients: List[str]
  dietary_restrictions: List[str]

AnalyzeDietaryCompatibilityOutputSchema = Dict
CreateSampleRecipesOutputSchema = List[BaseRecipe]
CreateSampleNutritionDataOutputSchema = List[NutritionData]
    